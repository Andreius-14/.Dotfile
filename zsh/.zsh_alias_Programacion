#=============================
#  GIT
#=============================

alias gcl='git clone --depth 1'
alias gi='git init'
alias ga='git add'
alias gc='git commit -m'
alias gp='git push origin master'


#=============================
#  Git Log
#=============================
#oneline
_hash="%h"
_autor="%an"
_email="%ae"

_time="%ar"
_timel="%aD"
_date="%as"

_msm="%s"
_branch="%d"

#Base
alias atom_log="git log --graph --abbrev-commit --decorate --color=always"

atom_custom(){  atom_log --pretty=format:"$1" --all  ${@:2}}
gw() {printf "%s" "%C($1)$2%C(reset)"}

#Abreviaciones
_glm="$(gw 'bold blue' $_hash) $(gw 'cyan' "- [$_date]") $(gw 'bold 42' "$_autor:") $(gw '229' $_msm) $(gw 'bold' $_branch) %n"
_gla="%C(bold blue)$_hash%C(reset) - %C(cyan)[$_date]%C(reset) %C(bold 42)[$_time]%C(reset) %C(229)[$_timel]%C(reset)%C(bold)$_branch%C(reset)  %n''          %C(dim white)$_autor - $_email%C(reset)%n''          %C(bold 141)Mensaje: \"$_msm\"%C(reset)%n"

#Alias
alias glm="atom_custom '$_glm'"
alias gla="atom_custom '$_gla'"

# alias glmn="glm | sed 's/\*//g' "
# alias glan="gla | sed 's/\*//g' "

glmn(){ glm "$@" | sed 's/\*//g'; }
glan(){ gla "$@" | sed 's/\*//g'; }

# atom_custom "%C(green)%T %n
# ↳name:  [%an] %aN 
# ↳email: [%ae] [%aE] [%al] 
# ↳fecha: [%as] [%ar] [%ai] [%ad] [%aD] [%at]
# ↳commit:%s %f %b %B "

#=============================
#  Git submodule
#=============================

#=============================
#  Git diff
#=============================


#=======================================================================================
#  GIT FUNCTION
#=======================================================================================


#====================
#  Atomo
#====================
function g_GeneraCommit(){
    git add . && git commit -m "$1"
}

function g_inicio (){
  git init -b main
}


#=============================
#  Git submodule
#=============================
function g_submodule-Download(){
    git submodule init
    git submodule update

}

function g_submodule-Pull(){
    git pull --recurse-submodules
}


#====================
#  Molecula
#====================

function github() {
    g_GeneraCommit "$1" && git push
}



#====================
#  Celulas
#====================

function g_EnlaceRemoto(){

  [[ -z "$1" ]] && { echo "No se ha ingresado URL"; return 1; }

  echo -e "\e[32m[Inicializando Git]\e[0m"
  [[ ! -d .git ]] && {g_inicio}

  #Enlace Remoto
  echo -e "\e[32m[Agregando Enlace Remoto]\e[0m"
  git remote add origin "$1" 2>/dev/null || git remote set-url origin "$1"

  # Verificar Cambios
    if ! git pull origin main 2>/dev/null; then
        
        echo -e "\e[32m[Pasos de Rebase]\e[0m"

        read -p "¿Desea intentar con rebase? (s/n): " respuesta
        if [[ "$respuesta" =~ ^[Ss]$ ]]; then
            git pull origin main --rebase || {
                echo "Error: No se pudo realizar el rebase."
                return 1
            }
        else
            echo "Advertencia: No se sincronizó con el remoto."
        fi
    fi

  echo -e "\e[32m[Generando Commit]\e[0m"

  g_GeneraCommit "Enlace Remoto a Github"

  # Remoto 
  echo -e "\e[32m[Enviando Cambios]\e[0m"
  git push origin main || echo "Enpuje Fallido"
}

#=======================================================================================
#  Lenguajes de Programacion
#=======================================================================================

#=========
#  PHP
#=========

alias phpserver="php -S localhost:8000"

#=========
#  PY
#=========

alias pyEntorno='virtualenv venv && . venv/bin/activate'
alias pyEnter='. venv/bin/activate'
alias pyExit='deactivate'

alias pyList='pip freeze > requeriments.txt'
alias pyRestaurar='pip install -r requirements.txt'
alias pyNodemon='nodemon --exec python ' #NameFile 


#=========
#  JS
#=========

alias jsVite='pnpm create vite . && pnpm install'

alias jsNode='pnpm init && pnpm add standard -D  && jsEditJson'

function jsEditJson() {
    local config='{"type": "module", "eslintConfig": {"extends": "standard"}}'
    jq ". + $config" package.json > temp.json && mv temp.json package.json
}
#========
#  C#
#========

alias CsEntorno='dotnet new sln && dotnet new console -o Main && dotnet sln add */'
