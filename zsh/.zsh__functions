FrameAscii() {

  # Validar que se ha proporcionado un archivo GIF como argumento
  readonly input_file="${1:?"Error: Ingrese el Archivo gif"}"

  # Obtener el path_nombre del archivo sin la extensión
  local base_name="$(basename "$input_file" .gif)"
  local path_nombre="Frame_$base_name"
  local folder="Ascii_$base_name"

  Frame $input_file

  mkdir -p $folder

  ascii $path_nombre/*.png --save-txt $folder || Error "Imagen a Ascii"

  rename "ascii-art" "" $folder/* && rename "-" "" $folder/*  || Error "Al Renombrar"

  echo "Conversión completada"
}

Frame() {
  readonly input_file="${1:?"Error: Ingrese el Archivo GIF como argumento."}"

  # Obtener el nombre base y el directorio de salida
  local base_name="$(basename "$input_file" .gif)"
  local folder="Frame_$base_name"

  mkdir -p $folder

  ffmpeg -i "$input_file" "$folder/%03d.png" || Error "Extraccion Frames"

  echo "Extracción completada. '$folder'."
}

Error(){
  echo "Error: $1 "
  return 1
}

#=============================
#  LINUX -- AUTOMATIZACION 
#=============================


remove_path() {
  if [[ -z "$1" ]]; then
    echo "Debes proporcionar una ruta para eliminar del PATH."
    return 1
  fi

  # Usar un patrón que elimine la ruta de forma segura
  export PATH=$(echo "$PATH" | sed -e "s|^$1:||" -e "s|:$1:|:|" -e "s|:$1||" -e "s|^$1||")
}

#=============================
#  LINUX -- Dotfiles
#=============================


dotfiles_gnome() {
  # Ruta del directorio donde se guardará el archivo
  target_dir=~/dotfile/Gnome
  output_file="$target_dir/Gnome_Extensiones.txt"
  
  # Verificar si el directorio existe
  if [[ -d "$target_dir" ]]; then
    # Generar la lista de extensiones instaladas y guardarla en el archivo
    gnome-extensions list > "$output_file"
    echo "Lista de extensiones GNOME guardada en $output_file"
  else
    echo "El directorio $target_dir no existe."
  fi
}


tabla_multiplicar() {
  # Comprobar si se pasó un número como argumento
  if [ -z "$1" ]; then
    echo "Por favor, ingresa un número para mostrar su tabla de multiplicar."
    return 1
  fi

  # Input
  local numero=$1

  # Imprimir la tabla de multiplicar con formato simple y alineado
  echo -e "==============\n  Tabla: $numero\n==============" 
  for i in {1..12}; do
    # Asegurarse de que los números de un solo dígito tengan un 0 al principio
    printf "%2d x %2d = %02d\n" "$numero" "$i" "$((numero * i))"
  done
}

