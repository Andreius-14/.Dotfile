
#════════════════════════════════════════════════════════════════════════════════════════════╗ 
# Linux -- Little
#════════════════════════════════════════════════════════════════════════════════════════════╝


Error() { 
  # Colores: [31: Rojo] [32: Verde] [33: Amarillo] [34: Azul] [35: Magenta] [36: Cian] [37: Blanco]
  local msm="$1"
  local num_color="${2:-31}"  # Si no se pasa un color, usa rojo por defecto (31)

  echo -e "\e[${num_color}mError: $msm\e[0m" >&2
  return 1
}

  
#════════════════════════════════════════════════════════════════════════════════════════════╗ 
# Linux -- Automatizacion 
#════════════════════════════════════════════════════════════════════════════════════════════╝
enlace_soft(){
    local ruta1="$1"
    local ruta2="${2:-.}"

   ln -s "$(realpath "$ruta1")" "$ruta2"
}

remove_path() {
  if [[ -z "$1" ]]; then  
    echo "Debes proporcionar una ruta para eliminar del PATH."
    return 1
  fi

  # Usar un patrón que elimine la ruta de forma segura
  export PATH=$(echo "$PATH" | sed -e "s|^$1:||" -e "s|:$1:|:|" -e "s|:$1||" -e "s|^$1||")
}

#=============================
#  LINUX -- Dotfiles
#=============================




#=============================
#  LINUX -- Scripts
#=============================

habilitar-scripts() {
  local directorio="$HOME/404__ShellScript"
  local permisos="755" # Ajusta los permisos según tus necesidades

  [[ -d "$directorio" ]] || { echo "Ruta $directorio No existe."; return 1; }

    echo "Buscando archivos .sh en $directorio..."

    find "$directorio/" -type f -name "*.sh" -print0 | while IFS= read -r -d '' archivo; do
            chmod "$permisos" "$archivo"
            echo "Permiso Otorgado: [$permisos] $archivo "
    done
}



#=============================
#  LINUX -- Matematica
#=============================

tabla_multiplicar() {
  # Comprobar si se pasó un número como argumento
  if [ -z "$1" ]; then
    echo "Por favor, ingresa un número para mostrar su tabla de multiplicar."
    return 1
  fi

  # Input
  local numero=$1

  # Imprimir la tabla de multiplicar con formato simple y alineado
  echo -e "==============\n  Tabla: $numero\n==============" 
  for i in {1..12}; do
    # Asegurarse de que los números de un solo dígito tengan un 0 al principio
    printf "%2d x %2d = %02d\n" "$numero" "$i" "$((numero * i))"
  done
}



bucle() {
    if [ $# -lt 2 ]; then
        echo "Uso: repeat <veces> <comando>"
        echo "Ejemplo: repeat 4 spd-say \"hola\""
        return 1
    fi
    
    local times=$1
    shift  # Remueve el primer argumento (el número)
    local command="$@"
    
    for ((i=1; i<=times; i++)); do
        eval "$command"
    done
}

list_voices() {
    echo "Voces disponibles en Google TTS:"
    echo "es - Español España"
    echo "es-ES - Español España"
    echo "es-US - Español Estados Unidos"
    echo "es-MX - Español México"
    echo "es-AR - Español Argentina"
    echo "es-CO - Español Colombia"
    echo "en - Inglés"
    echo "en-US - Inglés USA"
    echo "en-GB - Inglés UK"
    echo "fr - Francés"
    echo "de - Alemán"
    echo "it - Italiano"
    echo "pt - Portugués"
    echo "ru - Ruso"
    echo "ja - Japonés"
    echo "zh - Chino"
}

# Función mejorada de Google TTS con selección de voz
googletts() {
    local text="${1}"
    local lang="${2:-es-ES}"  # Español España por defecto
    
    echo "Usando voz: $lang"
    curl -s -G \
        --data-urlencode "text=${text}" \
        "https://translate.google.com/translate_tts?ie=UTF-8&tl=${lang}&client=tw-ob" \
        | mpv - --no-video 2>/dev/null
}

info_Comandos-mas-usados(){

history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a; }' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n10
echo -e "\nGraficos: \n"
history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -n | tail | perl -lane 'print $F[1], "\t", $F[0], " ", "▄" x ($F[0] / 12)' 

}
#════════════════════════════════════════════════════════════════════════════════════════════╗ 
#                                     INFORMACION
#════════════════════════════════════════════════════════════════════════════════════════════╝
#
# info_ssh(){
#   echo -e "\n══════════════════════════════════════════════"
#   echo -e "nota: Tener Instalado [openssh, nmap]"
#   echo -e "nota: El sistema debe tener Password"
#   echo -e "nota: El sistema debe tener Corriendo sshd"
#   echo -e "══════════════════════════════════════════════\n"
#
#   local inf_name=$(whoami)
#   local inf_ip=$(ip a | grep "192.168" || echo "Error de Red")
#
#   echo "Name -> $inf_name "
#   echo "IP   -> $inf_ip   " 
#   echo -e "\n\nLos Puertos Habiertos ⮯"
#   ss -tuln
# }
