FrameAscii() {

  # Validar que se ha proporcionado un archivo GIF como argumento
  readonly input_file="${1:?"Error: Ingrese el Archivo gif"}"

  # Obtener el path_nombre del archivo sin la extensión
  local base_name="$(basename "$input_file" .gif)"
  local path_nombre="Frame_$base_name"
  local folder="Ascii_$base_name"

  Frame $input_file

  mkdir -p $folder

  ascii $path_nombre/*.png --save-txt $folder || Error "Imagen a Ascii"

  rename "ascii-art" "" $folder/* && rename "-" "" $folder/*  || Error "Al Renombrar"

  echo "Conversión completada"
}

Frame() {
  readonly input_file="${1:?"Error: Ingrese el Archivo GIF como argumento."}"

  # Obtener el nombre base y el directorio de salida
  local base_name="$(basename "$input_file" .gif)"
  local folder="Frame_$base_name"

  mkdir -p $folder

  ffmpeg -i "$input_file" "$folder/%03d.png" || Error "Extraccion Frames"

  echo "Extracción completada. '$folder'."
}

Error(){
  echo "Error: $1 "
  return 1
}

#=============================
#  LINUX -- AUTOMATIZACION 
#=============================


remove_path() {
  if [[ -z "$1" ]]; then
    echo "Debes proporcionar una ruta para eliminar del PATH."
    return 1
  fi

  # Usar un patrón que elimine la ruta de forma segura
  export PATH=$(echo "$PATH" | sed -e "s|^$1:||" -e "s|:$1:|:|" -e "s|:$1||" -e "s|^$1||")
}

#=============================
#  LINUX -- Dotfiles
#=============================


dotfiles_paquetes() {
  # Ruta del directorio donde se guardará el archivo
  Directorio_Principal=~/dotfile/.Archivos-Temporales

  ruta1="$Directorio_Principal/Gnome_All_Extensiones.txt"
  ruta2="$Directorio_Principal/Gnome_Enable_Extensiones.txt"
  
  # Verificar si el directorio existe
  if [[ -d "$Directorio_Principal" ]]; then

    gnome-extensions list > "$ruta1"            || echo "Error_Gnome" >&2
    gnome-extensions list --enabled > "$ruta2"   || echo "Error_Gnome" >&2

    pacman -Qqe > "$Directorio_Principal/Paquetes_Instalados_Pacman.txt" || echo "Error_pacman" >&2
    pamac list -qe >"$Directorio_Principal/Paquetes_Instalados_Pamac.txt" || echo "Error_pamac" >&2
    npm list -g > "$Directorio_Principal/Paquetes_Instalados_Npm.txt"  || echo "Error_Npm" >&2
    pnpm list -g > "$Directorio_Principal/Paquetes_Instalados_Pnpm.txt" || echo "Error_Pnpm" >&2
    brew leaves >  "$Directorio_Principal/Paquetes_Instalados_Brew.txt" || echo "Error_Brew" >&2
    flatpak list --columns=application --app > "$Directorio_Principal/Paquetes_Instalados_Flatpak.txt" || echo "Error_Flatpak"  >&2

    echo "Listas de Paquetes -- Linux"
    t $Directorio_Principal
  else
    echo "El directorio $Directorio_Principal no existe."
  fi
}


tabla_multiplicar() {
  # Comprobar si se pasó un número como argumento
  if [ -z "$1" ]; then
    echo "Por favor, ingresa un número para mostrar su tabla de multiplicar."
    return 1
  fi

  # Input
  local numero=$1

  # Imprimir la tabla de multiplicar con formato simple y alineado
  echo -e "==============\n  Tabla: $numero\n==============" 
  for i in {1..12}; do
    # Asegurarse de que los números de un solo dígito tengan un 0 al principio
    printf "%2d x %2d = %02d\n" "$numero" "$i" "$((numero * i))"
  done
}


function habilitar_scripts() {
  local directorio="$HOME/.Scripts"
  local permisos="755" # Ajusta los permisos según tus necesidades

  if [[ -d "$directorio" ]]; then
    echo "Buscando archivos .sh en $directorio..."
    for archivo in "$directorio"/*.sh; do
      if [[ -f "$archivo" ]]; then
        chmod "$permisos" "$archivo"
        echo "Se ha otorgado permiso de ejecución a: $archivo"
      fi
    done
  else
    echo "El directorio $directorio no existe."
  fi
}

